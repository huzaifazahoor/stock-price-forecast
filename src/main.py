import os

import pandas as pd
import requests
from prophet import Prophet

FMP_API_KEY = os.getenv("FMP_API_KEY") or "YOUR_FMP_API_KEY"


def fetch_data(url):
    """Fetches data from the given URL and returns the JSON response.

    Args:
        url (str): The URL to fetch data from.

    Returns:
        dict: JSON response from the API.
    """
    response = requests.get(url).json()
    return response


def preprocess_data(data):
    """Preprocesses the historical data for compatibility with Prophet model.

    Args:
        data (dict): The historical data in dictionary format.

    Returns:
        pd.DataFrame: Processed DataFrame with renamed columns.
    """
    df = pd.DataFrame(data["historical"])
    df.reset_index(inplace=True)
    df.rename(columns={"date": "ds", "adjClose": "y"}, inplace=True)
    return df


def train_prophet_model(data):
    """Trains a Prophet model on the provided data.

    Args:
        data (pd.DataFrame): Processed DataFrame with 'ds' and 'y' columns.

    Returns:
        Prophet: Trained Prophet model.
    """
    model = Prophet(
        changepoint_prior_scale=0.05,
        holidays_prior_scale=15,
        seasonality_prior_scale=10,
        weekly_seasonality=True,
        yearly_seasonality=True,
        daily_seasonality=False,
    )
    model.add_country_holidays(country_name="US")
    model.fit(data)
    return model


def generate_forecast(model, periods=365):
    """Generates forecasts using the trained Prophet model.

    Args:
        model (Prophet): Trained Prophet model.
        periods (int): Number of periods to forecast into the future.

    Returns:
        pd.DataFrame: DataFrame containing forecasted values.
    """
    future = model.make_future_dataframe(periods=periods)
    forecast = model.predict(future)
    return forecast


def plot_forecast(model, forecast):
    """Plots the forecast generated by the Prophet model.

    Args:
        model (Prophet): Trained Prophet model.
        forecast (pd.DataFrame): DataFrame containing forecasted values.
    """
    model.plot(forecast)


def main():
    symbol = "AAPL"
    from_date = "2022-01-01"
    to_date = "2023-08-01"
    URL = f"https://financialmodelingprep.com/api/v3/historical-price-full/{symbol}?from={from_date}&to={to_date}&apikey={FMP_API_KEY}"

    # Fetch data
    data = fetch_data(URL)

    # Preprocess data
    df = preprocess_data(data)

    # Train Prophet model
    model = train_prophet_model(df)

    # Generate forecast
    forecast = generate_forecast(model)

    # Plot forecast
    plot_forecast(model, forecast)


if __name__ == "__main__":
    main()
